-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalOne(c@[stack, state, world], insn){
  case insn of
    READ -> case readWorld(world) of [n, w2] -> [n: stack, state, w2] esac
    | WRITE  -> case stack of s:tail -> [tail, state, writeWorld(s, world)] esac
    | BINOP (s) -> case stack of y:x:tail -> [evalOperation(s, x, y): tail, state, world] esac
    | LD    (x) -> [state(x) : stack, state, world]
    | ST    (x) -> case stack of s:tail -> [tail, state <- [x, s], world] esac 
    | CONST (n) -> [n : stack, state, world]
  esac
}

-- Stack machine interpreter. Takes  
-- an SM-configuration (stack of integers, state, word)
-- and a program
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of 
  {} -> c
  | i: insns -> eval(evalOne(c, i), insns) 
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(varName) -> {LD(varName)}
  | Const(x) -> {CONST(x)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
  | _        -> failure ("\nUnknown evalExpr '" ++ expr.string ++ "' in compileExpr\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of 
        Assn   (varName, expr)  -> compileExpr(expr) +++ {ST(varName)} 
        |Seq   (s1, s2)         -> compileSM(s1) +++ compileSM(s2)
        |Skip                   -> {}
        |Read   (varName)       -> {READ} +++ {ST(varName)}  
        |Write  (expr)          -> compileExpr(expr) +++ {WRITE}
        | _                     -> failure("Unknown statement '" ++ stmt.string ++ "' im CompileSM\n")
    esac
}
