-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- fun logProgram(list){
--   fun repr(value){
--         case value of 
--             head: tail -> foldr(fun (acc, value) { acc + repr(head) + "\n" + repr(tail)}, "", value)
--             | value -> value.string
--         esac
--   }
--   var fName = "a_log.txt";
--   var file = fopen(fName, "w");
--   fprintf(file, "%s", repr(list)); 
--   fclose(file)
-- }

fun log (v) {
  if (false) then    
   printf("%s\n", v.string)
  fi
}

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c.string, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes  
-- an SM-configuration (stack of integers, state, word)
-- and a program
-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> if i >= locs.length then failure("Locs overflow\n") fi; locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cstack, state, world], insns) {
    case insns of 
      {} -> c
      | i: insns -> 
        case evalOne(c, i, insns) of 
            [c@[stack, cstack, [a, l], world], new_insns] -> eval(c, new_insns)
            | c@[stack, cstack, [a, l], world] -> eval(c, insns)
        esac 
    esac
  }

  fun createLocals(stack, na, nl){
    case take(stack, na) of [tail, args] ->
      [tail, [listArray(args), initArray (nl, fun (_) {0})]]
    esac
  }

  fun evalOne(c@[stack, cstack, state, world], insn, restCode){
    log(insn);
    case insn of
      READ -> case readWorld(world) of [n, w2] -> [n: stack, cstack, state, w2] esac
      | WRITE  -> case stack of s:_ -> [stack, cstack, state, writeWorld(s, world)] esac
      | BINOP (s) -> case stack of y:x:tail -> [evalOp(s, x, y): tail, cstack, state, world] esac
      | LD    (x) -> 
            case lookup(state, x) of v -> 
                    [v : stack, cstack, state, world] 
                    esac 
      | LDA (x) -> [Ref(x): stack, cstack, state, world]
      | ST (loc) -> case stack of v:_ -> 
                      assign(state, loc, v); 
                      c  
                      esac 
      | STI ->  case stack of v:Ref(x):tail -> 
                  assign(state, x, v);
                  [v:tail, cstack, state, world] 
                esac
      | CONST (n) -> [n : stack, cstack, state, world]
      | JMP (lab) -> [c, env[0](lab)]
      | CJMP (cond, lab) -> 
          case stack of result:tail ->
              if result == 0 then 
                case cond of 
                    Z -> [[tail, cstack, state, world], env[0](lab)]  
                    | NZ -> [tail, cstack, state, world]  
                esac
              else 
                case cond of 
                    Z -> [tail, cstack, state, world]  
                    | NZ -> [[tail, cstack, state, world], env[0](lab)]  
                esac
              fi 
          esac
                            
      | LABEL (lab) -> c
      | DROP -> case stack of 
          _:tail -> [tail, cstack, state, world] 
          esac
      | BEGIN (_, nArgs, nLocs) -> 
          case createLocals(stack, nArgs, nLocs) of [stack, state] ->
              [stack, cstack, state, world]
          esac
      | END -> 
        case cstack of
          {} -> [c, {}] 
          |[oldState, nextCode] : cstack -> 
              [[stack, cstack, oldState, world], nextCode]
        esac
      | CALL (fLabel, nArgs) -> [[stack, [state, restCode]: cstack, state, world], fromLabel(env, fLabel)]
      | GLOBAL (x) -> assign(state, Glb(x), 0); c
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Gets the number of arguments 
  fun getArgs () {
    nArgs
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  fun getState(){
    state
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal,
   getArgs, 
   getState
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

fun getArgs (env) {
  env [14] ()
}

fun getState (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }


  fun compile (lab, env, stmt) {
    var byteCode = case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (name)        -> [false, env, singletonBuffer (LD (env.lookupVar(name)))]
    --- LDA(x) put Ref(x) on stack
    | Ref    (name)        -> [false, env, singletonBuffer (LDA (lookupVar(env, name)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (name)      -> [false, env, singletonBuffer (READ) <+ ST (env.lookupVar(name)) <+ DROP]
    | Write (e)      -> 
        case env.genLabel of [labExpr, env] ->
        case compile(labExpr, env, e) of [labUsed, env, code]  ->
          [false, env, 
          code 
          <+> label(labExpr, labUsed)
          <+ WRITE
          <+ DROP ]
        esac
        esac  
    | Assn  (x, expr)   ->  case compile(lab, env, expr) of [flag, env, eCode] ->
                            case compile(lab, env, x) of [flag, env, xCode] ->
                              [flag, env, xCode <+> eCode <+ STI]
                            esac
                            esac
    | Seq   (s1, s2) ->
        case env.genLabel of [s2Lab, env] ->
        case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
        case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
          [labUsed, env, 
          s1Code 
          <+> label (s2Lab, s2LabUsed) 
          <+> s2Code]
        esac
        esac
        esac
    | While(e, s)   -> 
        case env.genLabel of  [labS, env] -> 
        case env.genLabel of  [labE, env] -> 
        case env.genLabel of  [labEEnd, env] -> 
        case compile(labE, env, s) of [_, env, sCode] -> 
        case compile(labEEnd, env, e) of [labEEndUsed, env, eCode] -> 
                [false, env, 
                singletonBuffer(JMP(labE)) 
                <+ LABEL(labS)
                <+> sCode 
                <+ LABEL(labE)
                <+> eCode
                <+> label(labEEnd, labEEndUsed)
                <+ CJMP(NZ, labS)
                ]
        esac
        esac
        esac 
        esac 
        esac
      | DoWhile(s, e) -> 
        case env.genLabel of [labS, env] -> 
        case env.genLabel of [labEStart, env] -> 
        case env.genLabel of [labEEnd, env] -> 
        case compile(labEStart, env, s) of [labEStartUsed, env, sCode] -> 
        case compile(labEEnd, env, e) of [labEEndUsed, env, eCode] ->
                [false, env, 
                singletonBuffer(LABEL(labS))
                <+> sCode 
                <+> label(labEStart, labEStartUsed)
                <+> eCode
                <+> label(labEEnd, labEEndUsed)
                <+ CJMP(NZ, labS)
                ]
        esac
        esac
        esac 
        esac 
        esac
      | If(e, s1, s2) -> 
        case env.genLabel of [labElse, env] ->
        case compile(lab, env, s1) of [_, env, s1Code] ->
        case compile(lab, env, s2) of [_, env, s2Code] ->
        case compile(lab, env, e) of [_, env, eCode] ->
          [true, env, 
          eCode
          <+ CJMP(Z, labElse)
          <+> s1Code
          <+ JMP(lab)
          <+ LABEL(labElse)
          <+> s2Code]
        esac
        esac 
        esac 
        esac
    | Ignore (expr) -> case compile(lab, env, expr) of [flag, env, code] -> 
                          [flag, env, code <+ DROP] 
                      esac
    | Binop (op, l, r) -> case env.genLabel of [lLab, env] ->
                          case env.genLabel of [rLab, env] ->
                          case compile(lLab, env, l) of [lLabUsed, env, lCode] ->
                          case compile(rLab, env, r) of [rLabUsed, env, rCode] ->
                            [false, env, 
                            lCode 
                            <+> label(lLab, lLabUsed) 
                            <+> rCode 
                            <+> label(rLab, rLabUsed) 
                            <+ BINOP(op)]
                          esac 
                          esac
                          esac
                          esac
    | Scope (defs, expr) -> 
        case env.beginScope of env ->
        case env.addBindings(defs) of env -> 
        case rememberAll(env, defs) of env ->
        case env.genLabel of [eLab, env] ->
        case compile(eLab, env, expr) of [eLabUsed, env, eCode] ->
          var varsCode = if isGlobal(env) then getGlobalsCode(defs) else emptyBuffer() fi;
          [false, env.endScope, varsCode <+> eCode <+> label(eLab, eLabUsed)]
        esac
        esac 
        esac
        esac
        esac 
    | Call (name, params) -> 
        case compileList(lab, env, params) of [_, env, paramsCode] ->
        case lookupFun(env, name) of Fun(fLabel, nArgs) ->
          if nArgs != params.size then failure("Wrong params number") fi;
          [false, env, 
          paramsCode 
          <+ CALL (fLabel, nArgs)] 
        esac
        esac
    | _   -> failure ("compileSM not implemented for " ++ stmt.string ++"\n")
    esac;
    log("FROM");
    log(stmt);
    log("TO");
    log(byteCode[2]);
    byteCode
  }
  
  fun compileList(lab, env, insns){
    case insns of 
      head:tail -> 
        case env.genLabel of [s2Lab, env] ->
          case compile (s2Lab, env, head) of [s2LabUsed, env, headCode] ->
          case compileList (lab, env, tail) of [labUsed, env, tailCode] -> 
            [labUsed, env, 
            headCode 
            <+> label (s2Lab, s2LabUsed) 
            <+> tailCode]
          esac
          esac
          esac
    
      | {} -> [false, env, emptyBuffer()]
      esac
  }
  fun getGlobalsCode(defs){
      fun genGlobal(code, def){
        case def of 
          Var(namesList) -> 
            foldl(fun(code, varName) {code <+ GLOBAL(varName)}, code, namesList)
          | _ -> code
        esac 
      }

      foldl(genGlobal, emptyBuffer(), defs)
  }
  fun addBindings(env, defs){
    fun addDef(env, def){
      case def of 
        Var(namesList) -> addVars(env, namesList)
        | Fun (name, params, body) -> 
            case env.genLabel of [fLabel, env] -> 
               env.addFun(name, fLabel, params.size) 
            esac
      esac 
    }

    foldl(addDef, env, defs)
  }

  fun rememberAll(env, defs){
    fun addDef(env, def){
      case def of 
        Var(namesList) -> env
        | Fun (name, params, body) -> 
            case lookupFun(env, name) of Fun(fLabel, nArgs) ->
              rememberFun(env, fLabel, params, body)
            esac
      esac 
    }

    foldl(addDef, env, defs)
  }

  -- return byreCode of funcs and env
  fun compileFuncs(env){


    -- return  byteCode of function and env
    fun compileFunc(env, Fun(fLabel, argsNames, body, state)){
      case beginFun(env, state) of env -> 
      case genLabel(env) of [lab, env] -> 
      case addArgs(env, argsNames) of env ->
      case compile(lab, env, body) of [labUsed, env, code] ->
      case compileFuncs(env) of [innerCode, env] ->
          [singletonBuffer(LABEL(fLabel)) 
          <+ BEGIN(fLabel, argsNames.size, getLocals(env))
          <+> code 
          <+> label(lab, labUsed)
          <+> innerCode
          <+ END,
          env]
      esac 
      esac 
      esac
      esac 
      esac
    }

    case getFuns(env) of [innerFuncs, env] ->
      foldl(
        fun ([accCode, env], func) {
          case compileFunc(env, func) of [innerCode, env] ->
            [accCode <+> innerCode, env]
          esac
        }, 
        [emptyBuffer(), env], 
        innerFuncs)
      
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of [endLabUsed, env, code] ->
       var a = getState(env);
       case compileFuncs(env) of [funcsCode, env] ->
             getBuffer $ 
                  singletonBuffer(LABEL ("main"))
                  <+ BEGIN("main", 0, getLocals(env))
                  <+> code 
                  <+> label (endLab, endLabUsed) 
                  <+ END
                  <+> funcsCode
       esac
       esac
  esac
}

