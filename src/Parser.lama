-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  -- l and r are functions that accept a attr
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal 
                                  {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |
                                  -- identifier
                                  x=lident                                          
                                          {fun (a) {
                                              case a of
                                                Ref  -> Ref (x)
                                              | Void -> Ignore (Var (x))
                                              | _    -> Var (x)
                                              esac
                                          }} |
                                  $(failure ("the rest of primary parsing in not implemented\n")));

var basic = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary));
var exp = memo $ eta syntax (basic 
                            | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});



-- A statement is represented by a data structure of the following shape:
--
-- stmt = string := expr            | //Assn   (string, expr) 
--        stmt ; stmt               | //Seq    (stmt, stmt)
--        skip                      | //Skip
--        read   (string)           | //Read   (string)
--        write  (expr)             | //Write  (expr)  

var innerStmt = memo $ eta syntax (
                kSkip                                       {Skip}          |              
                x=lident s[":="] vle=exp                    {Assn (x, vle)} |
                kWrite res=inbr[s("("), exp, s(")")]        {Write(res)}    |
                kRead res=inbr[s("("), lident, s(")")]      {Read(res)}     |         
                kWhile wExpr=exp kDo wStmt=stmt kOd         {While(wExpr, wStmt)}       |
                kDo wStmt=stmt kWhile wExpr=exp kOd         {DoWhile(wStmt, wExpr)}     |
                kIf ifExpr=exp kThen thenS=stmt  kFi        {If(ifExpr,thenS, Skip)}    |   
                kIf ifExpr=exp kThen thenS=stmt elseS=elsePart kFi {If(ifExpr,thenS, elseS)}  |
                kFor initStmt=stmt s[","] condExp=exp s[","] incrStmt=stmt kDo body=stmt kOd 
                {Seq(initStmt, While(condExp, Seq(body, incrStmt)))}

);

var elsePart = memo $ eta syntax (
        kElse elseS=stmt                                    {elseS}                   |  
        kElif ifExpr=exp kThen thenS=stmt elseS=elsePart    {If(ifExpr,thenS, elseS)} |
        kElif ifExpr=exp kThen thenS=stmt                   {If(ifExpr,thenS, Skip)}

);
