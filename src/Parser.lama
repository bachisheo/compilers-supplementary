-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- MEMO
--Takes a parser ”a” and returns its memoized version. 
--Needed for some parsers (for expamle, left-recursive ones).

--EXPR: fun expr (ops , opnd)
--A super-combinator to generate infix expression parser

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")")));
var exp = memo $ eta expr ({
        [Left, {[s("!!"), evalInfix], 
                [s("&&"), evalInfix]
                }],
        [Left, {[s("=="), evalInfix], 
                [s("!="), evalInfix]
                }],
        [Left, {[s("<="), evalInfix], 
                [s("<"), evalInfix],
                [s(">="), evalInfix], 
                [s(">"), evalInfix]
                }],
        [Left, {[s("+"), evalInfix], 
                [s("-"), evalInfix]
                }],
        [Left, {[s("*"), evalInfix], 
                [s("/"), evalInfix], 
                [s("%"), evalInfix]
                }]
      }
    , primary);


-- A statement is represented by a data structure of the following shape:
--
-- stmt = string := expr            | //Assn   (string, expr) 
--        stmt ; stmt               | //Seq    (stmt, stmt)
--        skip                      | //Skip
--        read   (string)           | //Read   (string)
--        write  (expr)             | //Write  (expr)  

var innerStmt = memo $ eta syntax (
                kSkip                                       {Skip}          |              
                x=lident s[":="] vle=exp                    {Assn (x, vle)} |
                kWrite res=inbr[s("("), exp, s(")")]        {Write(res)}    |
                kRead res=inbr[s("("), lident, s(")")]      {Read(res)}     |         
                kWhile wExpr=exp kDo wStmt=stmt kOd         {While(wExpr, wStmt)}       |
                kDo wStmt=stmt kWhile wExpr=exp kOd         {DoWhile(wStmt, wExpr)}     |
                kIf ifExpr=exp kThen thenS=stmt  kFi        {If(ifExpr,thenS, Skip)}    |   
                kIf ifExpr=exp kThen thenS=stmt elseS=elsePart kFi {If(ifExpr,thenS, elseS)}  |
                kFor initStmt=stmt s[","] condExp=exp s[","] incrStmt=stmt kDo body=stmt kOd 
                {Seq(initStmt, While(condExp, Seq(body, incrStmt)))}

);

var elsePart = memo $ eta syntax (
        kElse elseS=stmt                                    {elseS}                   |  
        kElif ifExpr=exp kThen thenS=stmt elseS=elsePart    {If(ifExpr,thenS, elseS)} |
        kElif ifExpr=exp kThen thenS=stmt                   {If(ifExpr,thenS, Skip)}

);

-- If statement with other rules -- can be ambiguous parsing
var stmt = memo $ eta syntax (s1=innerStmt s[";"] s2=stmt {Seq(s1, s2)} | innerStmt);
fun evalInfix(l, operation, r){
  Binop(operation, l, r)
}

-- Public top-level parser
public parse = stmt;
