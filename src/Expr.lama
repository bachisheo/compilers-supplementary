-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}
-- return pair of new context C and result of evaluation V
-- where V is the set of values: V = Z (integer numbers) | ref X | bottom (no nalue)
var bot = {};

(* Assignment *)
fun eval (c@[s, w], expr) {
    case expr of 
      Assn (l, r) ->  case evalList(c, {l, r}) of [[s, w], {name, value}] ->
                        [[s <- [name, value], w], value]
                      esac 
          
      | Seq (l, r) -> case evalList(c, {l, r}) of [c, {l_res, r_res}] -> [c, r_res] esac          
      | Skip -> [c, bot]                        
      | Read (varName) -> case readWorld(w) of 
                                [value, w2] -> [[s <- [varName, value], w2], bot]
                              | _ -> failure("Reading error")
                          esac        
      | Write (e) -> case eval(c, e) of [[s, w2], v] -> [[s, writeWorld(v, w2)], bot] esac        
      | If(cond, s1, s2) -> case eval(c, cond) of 
                                    [c, 0] -> eval(c, s2)
                                    |[c, _] -> eval(c, s1)
                            esac   
      | While (cond, body) ->   case eval(c, cond) of 
                                     [c,0] -> [c, bot]
                                    |[c,_] -> evalList(c, {body, expr})
                                    esac      
      | DoWhile (body, cond) -> evalList(c, {body, While(cond, body)})         
      | Var (varName) -> [c, s(varName)]          
      | Ref (varName) -> [c, varName]              
      | Const (i) -> [c, i]                
      | Binop   (op, l, r) -> case eval(c, l) of [c, l] -> 
                                case eval(c, r) of [c, r] -> 
                                [c, evalOp(op, l, r)]
                                esac
                              esac 
      -- evalulate expr anyway for side-effects 
      | Ignore  (expr) -> case eval(c, expr) of [c, _] -> [c, bot] esac
      |_ -> failure ("\nEvalExpr not implemented for %s\n", expr.string)  
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}