-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case lookup (state, name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case lookup (state, name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {addName (s, name, Val (0))}, state, names)
}

fun addParams (state, names, values) {
  foldl (fun (s, [name, value]) {addName (s, name, value)}, state, zip(names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, params, body) {
  addName (state, name, Fun (params, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}
-- return pair of new context C and result of evaluation V
-- where V is the set of values: V = Z (integer numbers) | ref X | bottom (no nalue)
var bot = {};

fun eval (c@[s, w], expr) {
  log(expr);
    case expr of 
      Scope (defs, expr) -> 
            case defineDefs(enterScope(s), defs) of s ->
            case eval([s, w], expr) of [[s, w], value] -> 
            case leaveScope(s) of s -> 
                [[s, w], value]
            esac
            esac  
            esac
      | Seq (l, r) -> case evalList(c, {l, r}) of [c, {l_res, r_res}] -> [c, r_res] esac
      | Assn (l, r) ->  
            case evalList(c, {l, r}) of 
              [c, {[arrName, idx], value}] -> 
                    -- it's link to array in s
                    arrName[idx] := value; 
                    [c, value]
              | [[s, w], {name, value}] -> [[s <- [name, value], w], value]
            esac 
      -- initial assigment 
      | Set (name, value) -> 
            case eval(c, value) of [[s, w], value] -> 
                [[s <- [name, value], w], value]
            esac 
      -- evalulate expr anyway for side-effects 
      | Ignore  (expr) -> case eval(c, expr) of [c, _] -> [c, bot] esac
      | Skip -> [c, bot]
      | If(cond, s1, s2) -> case eval(c, cond) of 
                                    [c, 0] -> eval(c, s2)
                                    |[c, _] -> eval(c, s1)
                            esac   
      | While (cond, body) ->   case eval(c, cond) of 
                                     [c,0] -> [c, bot]
                                    |[c,_] -> evalList(c, {body, expr})
                                    esac      
      | DoWhile (body, cond) -> evalList(c, {body, While(cond, body)})         
      | Var (varName) -> [c, lookup(s, varName)]          
      | Ref (varName) -> [c, varName]              
      | Const (i) -> [c, i]                
      | Binop   (op, l, r) -> case eval(c, l) of [c, l] -> 
                                case eval(c, r) of [c, r] -> 
                                [c, evalOp(op, l, r)]
                                esac
                              esac 
      | Call (name, args) -> 
          case lookup(s, name) of 
              Fun (_, External) -> eval (c, Builtin(name, args)) 
              | Fun(params, body) ->
                case evalList(c, args) of [[sBeforeCall, w], vals] ->
                case addParams(enterFunction(sBeforeCall), params, vals) of sInner -> 
                case eval([sInner, w], body) of [[sInner, w], res] -> 
                  [[leaveFunction(sBeforeCall, getGlobal(sInner)), w], res]
                esac
                esac
                esac
          esac
     | Builtin (fName, args) -> 
          case evalList(c, args) of [[s, w], argsVals] -> 
          case evalBuiltin(fName, argsVals, w) of [value, w] ->
            [[s, w], value]
          esac
          esac
      | String  (value) -> [c, value]  
      | Array   (exprList) -> 
          case evalList(c, exprList) of [s, vals] -> 
              [c, listArray(vals)]
          esac
      -- return value in array by index
      | Elem (arrExpr, idx) -> 
          case evalList(c, {arrExpr, idx}) of 
              [c, {Sexp(_, arrExpr), idx}] -> [c, arrExpr[idx]]
              | [c, {arrExpr, idx}] -> [c, arrExpr[idx]]
          esac
      -- return pair of name and idx 
      | ElemRef (arrExpr, idx) -> 
          case evalList(c, {arrExpr, idx}) of 
              [c, {Sexp(_, arrExpr), idx}] -> [c, [arrExpr, idx]]
              | [c, {arrExpr, idx}] -> [c, [arrExpr, idx]]
          esac
      | Sexp (tag, exprList) ->
          case evalList(c, exprList) of [c, valList] ->
              [c, Sexp(tag, listArray(valList))]
          esac
      |_ -> failure ("\nEvalExpr not implemented for %s\n", expr.string)  
  esac
}

fun defineDefs(s, defs){
  fun defineDef(s, def){
    case def of 
      Var(namesList) -> addNames(s, namesList)
      | Fun (name, params, body) -> addFunction(s, name, params, body)
    esac 
  }
  foldl(defineDef, s, defs)
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
