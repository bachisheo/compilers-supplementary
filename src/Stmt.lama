-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun read(world, state, varName){
    case readWorld(world) of 
    [value, w2] -> [state <- [varName, value], w2]
    | _ -> failure("Reading error")
    esac
}

fun eval (c@[state, world], stmt) {
    case stmt of 
        Assn   (varName, expr)  -> [state <- [varName, evalExpr(state, expr)], world]   
        |Seq   (s1, s2)         -> eval(eval(c, s1), s2)
        |Skip                   -> c          
        |Read   (varName)       -> case readWorld(world) of 
                                        [value, w2] -> [state <- [varName, value], w2]
                                        | _ -> failure("Reading error")
                                    esac
        |Write  (expr)          -> [state, writeWorld(evalExpr(state, expr), world)]
        | _                     -> failure("Unknown statement \n")
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}