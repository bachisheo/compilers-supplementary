-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)       
fun eval (c@[state, world], stmt) {
    case stmt of 
        Assn   (varName, expr)  -> [state <- [varName, evalExpr(state, expr)], world]   
        |Seq   (s1, s2)         -> eval(eval(c, s1), s2)
        |Skip                   -> c          
        |Read   (varName)       -> case readWorld(world) of 
                                        [value, w2] -> [state <- [varName, value], w2]
                                        | _ -> failure("Reading error")
                                    esac
        |Write  (expr)          -> [state, writeWorld(evalExpr(state, expr), world)]
        |While  (expr, inStmt)  ->  case evalExpr(state, expr) of 
                                    0 -> c
                                    | _ -> eval(eval(c, inStmt), stmt)
                                    esac 
        |DoWhile(stmt, expr)    -> eval(eval(c, stmt), While(expr, stmt))
        |If(expr, s1, s2)  ->  case evalExpr(state, expr) of 
                                    0 -> eval(c, s2)
                                    | _ -> eval(c, s1)
                                esac 
        | _                     -> failure("Unknown statement %s \n", stmt.string)
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}